" This needs to come before any syntax statements.
if filereadable("/usr/local/go/misc/vim/readme.txt")
  " See http://golang.org/misc/vim/readme.txt
  set rtp+=/usr/local/go/misc/vim
  filetype plugin indent on
  " Re-format .go files when saving. This uses ftplugin/go/fmt.vim
  autocmd BufWritePost *.go :Fmt
endif


" Go loves tabs. I don't.
autocmd FileType go setlocal nolist noexpandtab shiftwidth=4 softtabstop=4 tabstop=4

set autoindent
set autochdir            " set working directory to match the current file
set backup
set backupdir=~/.vim/backup
set expandtab            " To insert space characters whenever the tab key is pressed
set hidden
set history=200          " Store last 200 commands as history.
set hlsearch             " Highlight previous search results
set incsearch            " Incremental search
set laststatus=2         " enable the status bar
set list                 " highlight whitespace
set listchars=tab:>.,trail:.,extends:#,nbsp:.
set nocompatible
set pastetoggle=<F2>     " hit this on insert when pasting code in
set ruler                " show the line number on the bar
set shiftwidth=2         " number of space characters inserted for indentation
set showcmd              " Show (partial) command in status line.
set showmatch            " Show matching brackets.
set showmode
set smartindent
set softtabstop=2        " How many spaces to insert if you hit tab.
set tabstop=2            " Viewing a real tab uses two columns.
set undolevels=200
set wildmenu wildmode=longest:full

" save precious keystrokes
nnoremap ; :

nmap <silent> <C-D> :NERDTreeToggle<CR>

" sudo
cmap w!! w !sudo tee % >/dev/null

" auto-reload changes to .vimrc
au! BufWritePost .vimrc source %

" presentation
set background=dark
set guifont=Inconsolata

" This assumes a 256-color terminal. If you don't have one, get one.
colorscheme pablo
set t_Co=256

if has("colorcolumn")
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('Comment', '\%>80v.\+', -1)
endif

" hate whitespace: http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" automatically strip trailing whitespace from these file formats
autocmd BufWritePost *.php :%s/\s\+$//e
autocmd BufWritePost *.rules :%s/\s\+$//e
autocmd BufWritePost *.rb :%s/\s\+$//e
autocmd BufWritePost BUILD :%s/\s\+$//e
autocmd BufWritePost *.py :%s/\s\+$//e
autocmd BufWritePost *.sh :%s/\s\+$//e
autocmd BufWritePost *.yml :%s/\s\+$//e
autocmd BufWritePost *.yaml :%s/\s\+$//e
autocmd BufWritePost *.gcl :%s/\s\+$//e


" Source a local configuration file if available.
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

syntax on

" useful for syntastic
let g:syntastic_python_checker_args = '--max-line-length=80 --max-complexity=9'
call pathogen#infect()

" Don't hide useful syntax highlighting when editing JSON.
let g:vim_json_syntax_conceal = 0

" bastards be resetting things.
highlight ExtraWhitespace ctermbg=red guibg=red
